/"
In this EE2024 assignment, we design and implement an aerospace exploration vehicle HOPE (Habitability Observer and Precurory Explorer). 
The data it collects in Mars would provide humans a better understanding of the conditions there. 

In this C embedded programming assignment, the base board is a set of scientific instruments and sensors on HOPE, 
the LPC1769 development board is a radiation resistant microcontroller for the scientific instruments and sensors, 
and the XBee RF module is a set of low gain antennas on HOPE pointed to an intermediate message transmission relay called 
HOME (Hovering Orbiter and Messenger Extension).
"/


//lpc17xx
#include "lpc17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_uart.h"
//baseboard
#include "pca9532.h"                    //LED dimmer (I2C)
#include "acc.h"                        //Accelerator (I2C)
#include "oled.h"                       //Display Screen (I2C)
#include "rgb.h"                        //LED colour states (GPIO)
#include "led7seg.h"                    //96x64 LED number display (GPIO)
#include "light.h"                      //Light sensor (I2C)
#include "temp.h"                       //Temperature sensor (GPIO)
//c
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
#include "math.h"
//Project Specifications
#define SAMPLING_TIME 2000               // In Seconds
#define LIGHTNING_THRESHOLD 3000         // In LUX
#define LIGHTNING_THRESHOLD_TIME 500     // 500ms
#define LIGHTNING_MONITORING 3000        // In LUX
#define TIME_UNIT 250                    // 250ms

static int32_t mean = 0;                //variable of z-value at initialization (z-off)
static int8_t x;                        //variable of accelerometer x-value
static int8_t y;                        //variable of accelerometer y-value
static int8_t z;                        //variable of accelerometer z-value
static int8_t xoff;                     //offset of x-value
static int8_t yoff;                     //offset of y-value
static int8_t zoff;                     //offset of z-value
static float temp;
static int32_t temptemp;

static uint8_t resetInitial = 1;    //variable state to update led7seg
static uint32_t initialTicks = 0;   //variable clock reference point for led7seg
static uint8_t segPosition = 0;     //for the segCounter array
static uint16_t ledNumber = 0xFFFF;
static uint8_t barcount=0;
static uint32_t currentTicks_bar;
static uint32_t initialTicks_bar;
static uint8_t resetinitial_bar = 1;
static char word1[5] = "";            //buffer to hold value of lux
static char word2[7] = "";            //buffer to hold value of temperature
static char word3[7] = "";            //buffer to hold value of x-variance
static char word4[7] = "";            //buffer to hold value of y-variance
static char word5[7] = "";            //buffer to hold value of z-variance
static uint8_t flag = 0;
static uint8_t intFlag = 0;
volatile uint32_t msTicks;            //variable of baseboard clock
static uint8_t resetinitial_oled = 1;
static uint32_t initialTicks_oled;
static uint32_t currentTicks_oled;
static char* msg = NULL;
uint8_t teraword[64];
static uint32_t light_val;
static uint32_t initialTicks_rgb=0;
static uint8_t ledstatus=0;
static uint8_t RGB_COLOUR=0;
static uint8_t mode=0;
static uint32_t lightning_timer[10];
static uint8_t lightning_counter = 0;
static uint32_t lightning_flagR;
static uint32_t lightning_flagF;
static uint8_t light_flag = 0;
static uint32_t initialTicks_oled2;

static char lightning_disp = '0';

void SysTick_Handler(void)
{
    msTicks++;
}
static uint32_t getTicks(void)
{
    return msTicks;
}
static void init_GPIO(void)
{
    PINSEL_CFG_Type PinCfg;
    PinCfg.Portnum = 2;
    PinCfg.Pinnum = 0;
    PinCfg.Funcnum = 0;
    PinCfg.OpenDrain = 0;
    PinCfg.Pinmode = 0;
    PINSEL_ConfigPin(&PinCfg);

    PinCfg.Pinnum = 5;
    PINSEL_ConfigPin(&PinCfg);

    GPIO_SetDir(2, 1<<5, 0);
    PinCfg.Portnum = 1;
    PinCfg.Pinnum = 31;
    PINSEL_ConfigPin(&PinCfg);
    GPIO_SetDir(1, 1<<31, 0);           //initialize SW4(P1.31) GPIO
    GPIO_SetDir(0, (1<<2), 0);          //initialize Temperature Sensor (P0.2) GPIO
    GPIO_SetDir(2, 1<<1, 1);            //initialize OLED (P2.1) GPIO
}

static void init_ssp(void)
{
    SSP_CFG_Type SSP_ConfigStruct;
    //P0.7 - SCK1    : Serial Clock SSP1
    PINSEL_CFG_Type PinCfg;
    PinCfg.Portnum = 0;
    PinCfg.Pinnum = 7;
    PinCfg.Funcnum = 2;
    PinCfg.OpenDrain = 0;
    PinCfg.Pinmode = 0;
    PINSEL_ConfigPin(&PinCfg);
    //P0.8 - MISO1: Master In Slave Out SSP1
    PinCfg.Pinnum = 8;
    PINSEL_ConfigPin(&PinCfg);
    //P0.9 - MOSI1: Master Out Slave In SSP1
    PinCfg.Pinnum = 9;
    PINSEL_ConfigPin(&PinCfg);
    PinCfg.Funcnum = 0;
    PinCfg.Portnum = 2;
    PinCfg.Pinnum = 2;
    PINSEL_ConfigPin(&PinCfg);//P2.2 - SSEL - used as GPIO
    SSP_ConfigStructInit(&SSP_ConfigStruct);
    // Initialize SSP peripheral
    SSP_Init(LPC_SSP1, &SSP_ConfigStruct);
    // Enable SSP peripheral
    SSP_Cmd(LPC_SSP1, ENABLE);
}
static void init_i2c(void)
{
    PINSEL_CFG_Type PinCfg;
    PinCfg.Portnum = 0;
    PinCfg.Pinnum = 10;
    PinCfg.Funcnum = 2;
    //P0.10 SDA2: I2C data input/output
    PINSEL_ConfigPin(&PinCfg);
    PinCfg.Pinnum = 11;
    //P0.11 SCL2: I2C CLK input/output
    PINSEL_ConfigPin(&PinCfg);
    // Initialize I2C peripheral
    I2C_Init(LPC_I2C2, 100000);
    //Enable I2C1 operation
    I2C_Cmd(LPC_I2C2, ENABLE);
}
void pinsel_uart3(void){
PINSEL_CFG_Type PinCfg;
PinCfg.Funcnum = 2;
PinCfg.Pinnum = 0;
PinCfg.Portnum = 0;
PINSEL_ConfigPin(&PinCfg);
PinCfg.Pinnum = 1;
PINSEL_ConfigPin(&PinCfg);
}
void init_uart(void){
UART_CFG_Type uartCfg;
uartCfg.Baud_rate = 115200;
uartCfg.Databits = UART_DATABIT_8;
uartCfg.Parity =UART_PARITY_NONE;
uartCfg.Stopbits = UART_STOPBIT_1;
pinsel_uart3();
UART_Init(LPC_UART3, &uartCfg);
UART_TxCmd(LPC_UART3,ENABLE);
}
void led7seg_update(void)
{
    char segCounter[14] = {'0', '1', '2', '3', '4', '5' ,'6' ,'A' ,'8', 'C', '0', 'E', 'F', '@'};

    if(msTicks - initialTicks >= 1000)
    {
        initialTicks = msTicks;
        segPosition++;
        if (segPosition <7)
            oled_clearScreen(OLED_COLOR_BLACK);
        if (segPosition >6)
        {
            if(segPosition%2 == 0)
                oled_clearScreen(OLED_COLOR_WHITE);
            else
                oled_clearScreen(OLED_COLOR_BLACK);
        }
        if (segPosition == 14)
        {
            led7seg_setChar(0xFF,1);
            resetInitial = 0;
            flag = 1;
        }
        else
        {
        resetInitial = 1;
        led7seg_setChar(segCounter[segPosition], 0);
        }
          }
    return;
}
void drawbar(void)
{
        initialTicks_bar = msTicks;
        if(barcount !=17)
        {
        pca9532_setLeds(ledNumber, 0xFFFF);
        ledNumber = ledNumber - pow(2,barcount);

        barcount++;
        }
        else
            {
            barcount = 0;
            ledNumber = 0xFFFF;
            flag = 1;
            sendLightningClear();

            }

}

void rgb_setLedd (uint8_t ledMask) //to set RGB from the modes
{
    if ((ledMask & RGB_RED) != 0) {
        GPIO_SetValue( 2, 1);
    } else {
        GPIO_ClearValue( 2, 1 );
    }

    if ((ledMask & RGB_BLUE) != 0) {
        GPIO_SetValue( 0, (1<<26) );
    } else {
        GPIO_ClearValue( 0, (1<<26) );
    }
}
void EINT3_IRQHandler(void)
{
    if((LPC_GPIOINT->IO2IntStatR>>10)&0x1)//sw3 interrupt
        {
        intFlag = 1;
        LPC_GPIOINT->IO2IntClr |= 1<<10; //clear sw3 interrupt
         }
    if ((LPC_GPIOINT->IO2IntStatF >> 5) & 0x1) // light sensor interrupt 
        {
        if(light_flag ==1) 
        light_flag = 2;

        if(light_flag == 0)
            {
            light_flag = 1;
            lightning_flagR = msTicks;
            }
        LPC_GPIOINT->IO2IntClr = (1 << 5); // clear light sensor interrupt
        light_clearIrqStatus();
        }
}

void shift(int a[], int n)
{
   int i;
   for(i = 0; i <= n-1; i++)
      a[i] = a[i+1];
}

void lightning(void)
{
    lightning_timer[lightning_counter] = msTicks;
    lightning_counter++;
}

void rgb_blink(void)
{
            if(mode == 0)
                RGB_COLOUR = RGB_BLUE;
            else
                RGB_COLOUR = RGB_RED;

            if (ledstatus == RGB_COLOUR)
                ledstatus = 0;
            else
                ledstatus = RGB_COLOUR;

            rgb_setLedd(ledstatus);
}

void printOled(void)
{
    oled_putString(4, 4, "LUX   :", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(4, 16, "TEMP  :", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(4, 28, "x:", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(36, 28, "y:", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(69, 28, "z:", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
}

void sendvalues(void)
{
    sprintf(teraword, "L%d_T%.lf_AX%d_AY%d_AZ%d\r\n",light_val,temp,x,y,z);
    UART_SendString(LPC_UART3,&teraword);
}

void sendLightningClear(void) //Survivor to Explorer
{
    msg = "Lightning Has Subsided. Scheduled Telemetry Will Now Resume.\r\n";
    UART_Send(LPC_UART3, (uint8_t *)msg , strlen(msg), BLOCKING);
}

void sendLightningDetect(void) //Explorer to Survivor
{
    msg = "Lightning Detected. Scheduled Telemetry is Temporarily Suspended.\r\n";
    UART_Send(LPC_UART3, (uint8_t *)msg , strlen(msg), BLOCKING);
}

void updateOled(void)
{
    acc_read(&x, &y, &z);//read offsets
    x-= xoff; //apply offsets
    y-= yoff;
    z-= zoff;
    light_val = light_read();         //read lux
       light_clearIrqStatus();         // clear interrupt
    temp = temp_read()/10.0;        //read temperature
    sprintf(word1, "%d    ", light_val);
    sprintf(word2, "%.1f   ", temp);
    sprintf(word3, "%d  ", x);
    sprintf(word4, "%d  ", y);
    sprintf(word5, "%d  ", z);
    oled_putString(49, 4, word1, OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(49, 16, word2, OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(8, 40, word3, OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(38, 40, word4, OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(68, 40, word5, OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    sendvalues();
}

void stateOled(void)
{
    if(mode == 0)
        oled_putString(4, 50, "Explorer", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    if(mode == 1)
        oled_putString(4, 50, "Survival", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
}

void SurvivalOled(void)
{
    oled_putString(49, 4, "S      ", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(49, 16, "S      ", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(8, 40, "S  ", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(38, 40, "S  ", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
    oled_putString(68, 40, "S  ", OLED_COLOR_BLACK, OLED_COLOR_WHITE);
}

void explorer(void)
{
    mode = 0; //mode for rgb colour and mode label
    printOled();
    if(msTicks - initialTicks_oled >= 2000)// 2 second delay
        {
        initialTicks_oled = msTicks;
            updateOled(); //read and update Oled
        }
    stateOled();
    if(msTicks - initialTicks_rgb >= 1000) //1 second delay
        {
                initialTicks_rgb = msTicks;
                    rgb_blink(); //toggle rgb
        }
}
void survival(void)
{
    mode = 1;                                 //mode for rgb colour and mode label
    printOled();
    SurvivalOled();
    stateOled();
    if(msTicks - initialTicks_rgb >= 1000)     //1 second delay
                {
                    initialTicks_rgb = msTicks;
                        rgb_blink();           //toggle rgb
                }
    if(msTicks - initialTicks_bar >= 250)      //0.25 second delay
    drawbar();// toggle pca9532
}

void rgb_initd (void) //initialize rgb
{
    GPIO_SetDir( 2, 1, 1 );
    GPIO_SetDir( 0, (1<<26), 1 );
    GPIO_SetDir( 2, (1<<1), 1 );

}
int main(void)
{
    init_GPIO();
    init_ssp();
    init_i2c();
    led7seg_init();
    rgb_initd ();
    acc_init();
    pca9532_init();
    oled_init();
    init_uart();
    light_enable();
    temp_init(&getTicks);


    light_setRange(LIGHT_RANGE_4000);             //Initialise light sensor
    light_setHiThreshold(LIGHTNING_THRESHOLD);    //Set its threshold for interrupt
    light_setLoThreshold(0);
    light_clearIrqStatus();                       //Clear interrupt

    LPC_GPIOINT->IO2IntEnF |= 1 << 5;             //enable light interrupt
    LPC_GPIOINT->IO2IntEnR |= 1 << 10;            // Enable GPIO Interrupt P2.10 (sw3)
    NVIC_EnableIRQ(EINT3_IRQn);                   //enable interupt for sw3 and light sensor

    SysTick_Config(SystemCoreClock / 1000);       // Setup SysTick Timer to interrupt at 1 msec intervals
    oled_clearScreen(OLED_COLOR_WHITE);           //cause of flashing

    acc_read(&xoff,&yoff,&zoff);
    while(1)
    {
        if(flag == 0)
            led7seg_update();
        if(flag == 1)
            explorer();

        if(flag == 2)
            survival();
        if(intFlag == 1)
            {

                        printOled();
                        updateOled();
                        intFlag = 0;
            }
        if(light_flag == 1 )
                {
                    light_setHiThreshold(3891); // set its threshold for interrupt
                    light_setLoThreshold(LIGHTNING_THRESHOLD-1);
                }
                if(light_flag==2)
                {

                    if(msTicks - lightning_flagR <= 500)
                        {
                        lightning();
                        if(lightning_counter >= 3)
                            if(flag == 2)
                            {
                                ledNumber = 0xFFFF;
                                barcount = 0;
                            }
                            else
                        {flag = 2;
                                sendLightningDetect();
                        }


                        }

                    led7seg_setChar('0'+lightning_counter,0);
                    light_flag = 0;
                    light_setHiThreshold(LIGHTNING_THRESHOLD); // set its threshold for interrupt
                                        light_setLoThreshold(0);
                }
                if(flag != 0)
                    if(lightning_counter!= 0)
                led7seg_setChar('0'+lightning_counter,0);
                    else
                        led7seg_setChar(0xFF,1);
                if(msTicks - lightning_timer[0] >= 3000)
                            {
                            if(lightning_counter >0)
                            {
                            shift(lightning_timer, lightning_counter);
                            lightning_counter -=1;
                            }
                            }
    }
}
